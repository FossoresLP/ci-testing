variables:
  E50_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e50.v1.10.11.5274269.tar.bz2"
  E50_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e50.v2.0.8-hotfix.1.5278088.tar.bz2"
  E100_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e100.v1.10.11.5274249.tar.bz2"
  E100_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e100.v2.0.8-hotfix.1.5278088.tar.bz2"
  E200_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e200.v1.10.11.5274249.tar.bz2"
  E200_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e200.v2.0.8-hotfix.1.5278088.tar.bz2"
  E300_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e300.v1.10.11.5274269.tar.bz2"
  E300_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e300.v2.0.8-hotfix.1.5278088.tar.bz2"
  E1000_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e1000.v1.10.11.5274249.tar.bz2"
  E1000_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e1000.v2.0.8-hotfix.1.5278088.tar.bz2"
  UGW3_SRC: "https://dl.ui.com/unifi/firmware/UGW3/4.4.50.5272448/GPL.UGW3.v4.4.50.5272448.tbz2"
  UGW4_SRC: "https://dl.ui.com/unifi/firmware/UGW4/4.4.50.5272479/GPL.UGW4.v4.4.50.5272479.tbz2"
  UGWXG_SRC: "https://dl.ui.com/unifi/firmware/UGWXG/4.4.50.5272479/GPL.UGWXG.v4.4.50.5272479.tbz2"
  MODULE_VERSION: "v1.0.20200413"
  TOOLS_VERSION: "v1.0.20200319"

stages:
  - docker
  - headers
  - module
  - tools

docker:mipsel:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:mipsel" -f DOCKERFILE-mipsel .
    - docker push "$CI_REGISTRY_IMAGE:mipsel"
  only:
    - master
  when: manual
  allow_failure: true

docker:mtk:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:mtk" -f DOCKERFILE-mtk .
    - docker push "$CI_REGISTRY_IMAGE:mtk"
  only:
    - master
  when: manual
  allow_failure: true

docker:octeon:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:octeon" -f DOCKERFILE-octeon .
    - docker push "$CI_REGISTRY_IMAGE:octeon"
  only:
    - master
  when: manual
  allow_failure: true

.headers:base:
  stage: headers
  script:
    - mkdir /build $CI_PROJECT_DIR/headers
    - cd /build
    - curl -o src.tar.bz2 $SOURCE
    - tar -xf src.tar.bz2 --wildcards 'source/kernel_*' --strip-components 1
    - mv kernel_* kernel.tar.gz
    - tar -xf kernel.tar.gz --strip-components 1
    - if [ $VERSION -ne 1 ]; then make ARCH=mips ubnt_er_${DEVICE}_defconfig; fi;
    - if [ $VERSION -eq 1 ]; then cp .config $CI_PROJECT_DIR/headers/.config; fi;
    - make -j5 ARCH=mips CROSS_COMPILE=$CROSS prepare modules_prepare
    - make -j5 ARCH=mips CROSS_COMPILE=$CROSS vmlinux modules
    - cp Module.symvers $CI_PROJECT_DIR/headers
    - make mrproper
    - if [ $VERSION -ne 1 ]; then make ARCH=mips O=$CI_PROJECT_DIR/headers ubnt_er_${DEVICE}_defconfig; fi;
    - make -j5 ARCH=mips O=$CI_PROJECT_DIR/headers CROSS_COMPILE=$CROSS modules_prepare
  artifacts:
    paths:
      - headers/

.headers:mipsel:
  extends: .headers:base
  image: $CI_REGISTRY_IMAGE:mipsel
  variables:
    CROSS: mipsel-linux-gnu-
  dependencies:
    - docker:mipsel

.headers:mtk:
  extends: .headers:base
  image: $CI_REGISTRY_IMAGE:mtk
  variables:
    CROSS: mipsel-mtk-linux-
  dependencies:
    - docker:mtk

.headers:octeon:
  extends: .headers:base
  image: $CI_REGISTRY_IMAGE:octeon
  variables:
    CROSS: mips64-octeon-linux-
  dependencies:
    - docker:octeon


# E50
headers:e50:v1:
  extends: .headers:mtk
  variables:
    SOURCE: $E50_SRC_v1
    DEVICE: e50
    VERSION: 1

headers:e50:v2:
  extends: .headers:mipsel
  variables:
    SOURCE: $E50_SRC_v2
    DEVICE: e50
    VERSION: 2

# E100
headers:e100:v1:
  extends: .headers:octeon
  variables:
    SOURCE: $E100_SRC_v1
    DEVICE: e100
    VERSION: 1

headers:e100:v2:
  extends: .headers:octeon
  variables:
    SOURCE: $E100_SRC_v2
    DEVICE: e100
    VERSION: 2

# E200
headers:e200:v1:
  extends: .headers:octeon
  variables:
    SOURCE: $E200_SRC_v1
    DEVICE: e200
    VERSION: 1

headers:e200:v2:
  extends: .headers:octeon
  variables:
    SOURCE: $E200_SRC_v2
    DEVICE: e200
    VERSION: 2

# E300
headers:e300:v1:
  extends: .headers:octeon
  variables:
    SOURCE: $E300_SRC_v1
    DEVICE: e300
    VERSION: 1

headers:e300:v2:
  extends: .headers:octeon
  variables:
    SOURCE: $E300_SRC_v2
    DEVICE: e300
    VERSION: 2

# E1000
headers:e1000:v1:
  extends: .headers:octeon
  variables:
    SOURCE: $E1000_SRC_v1
    DEVICE: e1000
    VERSION: 1

headers:e1000:v2:
  extends: .headers:octeon
  variables:
    SOURCE: $E1000_SRC_v2
    DEVICE: e1000
    VERSION: 2

# UGW3
headers:ugw3:
  extends: .headers:octeon
  variables:
    SOURCE: $UGW3_SRC
    DEVICE: ugw3
    VERSION: 1

# UGW4
headers:ugw4:
  extends: .headers:octeon
  variables:
    SOURCE: $UGW4_SRC
    DEVICE: ugw4
    VERSION: 1

# UGWXG
headers:ugwxg:
  extends: .headers:octeon
  variables:
    SOURCE: $UGWXG_SRC
    DEVICE: ugwxg
    VERSION: 1

# Module preparation
module:prepare:
  image: ubuntu
  stage: module
  needs: []
  script:
    - git clone -b $MODULE_VERSION git://git.zx2c4.com/wireguard-linux-compat $CI_PROJECT_DIR/module
    - cd $CI_PROJECT_DIR/module
    - curl -L https://gist.githubusercontent.com/Lochnair/805bf9ab96742d0fe1c25e4130268307/raw/29e37d43a5247a3f2584ef0d6d553ee9a4532e12/only-use-__vmalloc-for-now.patch | patch src/compat/compat.h
    - sed -i 's/ --dirty//g' src/Makefile
  artifacts:
    paths:
      - module

# Module build templates
.module:mtk:
  image: $CI_REGISTRY_IMAGE:mtk
  stage: module
  script:
    - cd $CI_PROJECT_DIR/module/src
    - make -j5 ARCH=mips CROSS_COMPILE=mipsel-mtk-linux- KERNELDIR=$CI_PROJECT_DIR/headers module
    - mipsel-mtk-linux-strip --strip-debug wireguard.ko
  artifacts:
    paths:
      - module/src/wireguard.ko
  needs:
    - job: module:prepare
      artifacts: true

.module:octeon:
  image: $CI_REGISTRY_IMAGE:octeon
  stage: module
  script:
    - cd $CI_PROJECT_DIR/module/src
    - make -j5 ARCH=mips CROSS_COMPILE=mips64-octeon-linux- KERNELDIR=$CI_PROJECT_DIR/headers module
    - mips64-octeon-linux-strip --strip-debug wireguard.ko
  artifacts:
    paths:
      - module/src/wireguard.ko
  needs:
    - job: module:prepare
      artifacts: true

# E50
module:e50:v1:
  extends: .module:mtk
  needs:
    - job: headers:e50:v1
      artifacts: true

module:e50:v2:
  extends: .module:mtk
  needs:
    - job: headers:e50:v1
      artifacts: true

# E100
module:e100:v1:
  extends: .module:octeon
  needs:
    - job: headers:e100:v1
      artifacts: true

module:e100:v2:
  extends: .module:octeon
  needs:
    - job: headers:e100:v2
      artifacts: true

# E200
module:e200:v1:
  extends: .module:octeon
  needs:
    - job: headers:e200:v1
      artifacts: true

module:e200:v2:
  extends: .module:octeon
  needs:
    - job: headers:e200:v2
      artifacts: true

# E300
module:e300:v1:
  extends: .module:octeon
  needs:
    - job: headers:e300:v1
      artifacts: true

module:e300:v2:
  extends: .module:octeon
  needs:
    - job: headers:e300:v2
      artifacts: true

# E1000
module:e1000:v1:
  extends: .module:octeon
  needs:
    - job: headers:e1000:v1
      artifacts: true

module:e1000:v2:
  extends: .module:octeon
  needs:
    - job: headers:e1000:v2
      artifacts: true

# UGW3
module:ugw3:
  extends: .module:octeon
  needs:
    - job: headers:ugw3
      artifacts: true

# UGW4
module:ugw4:
  extends: .module:octeon
  needs:
    - job: headers:ugw4
      artifacts: true

# UGWXG
module:ugwxg:
  extends: .module:octeon
  needs:
    - job: headers:ugwxg
      artifacts: true

# Tools
.tools:mtk:
  image: $CI_REGISTRY_IMAGE:mtk
  script:
    - git clone -b v1.0.20200206 git://git.zx2c4.com/wireguard-tools $CI_PROJECT_DIR/tools
    - cd $CI_PROJECT_DIR/tools/src
    - CC="mips-linux-musl-gcc" LDLIBS="-static" make -j5
    - mips-linux-musl-strip --strip-unneeded wg
  artifacts:
    name: wg-mtk
    paths:
      - tools/src/wg

.tools:octeon:
  image: $CI_REGISTRY_IMAGE:octeon
  script:
    - git clone -b v1.0.20200206 git://git.zx2c4.com/wireguard-tools $CI_PROJECT_DIR/tools
    - cd $CI_PROJECT_DIR/tools/src
    - CC="mips-linux-musl-gcc" LDLIBS="-static" make -j5
    - mips-linux-musl-strip --strip-unneeded wg
  artifacts:
    name: wg-mtk
    paths:
      - tools/src/wg
