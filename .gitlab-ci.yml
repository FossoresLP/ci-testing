variables:
  E50_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e50.v1.10.11.5274269.tar.bz2"
  E50_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e50.v2.0.8-hotfix.1.5278088.tar.bz2"
  E100_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e100.v1.10.11.5274249.tar.bz2"
  E100_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e100.v2.0.8-hotfix.1.5278088.tar.bz2"
  E200_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e200.v1.10.11.5274249.tar.bz2"
  E200_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e200.v2.0.8-hotfix.1.5278088.tar.bz2"
  E300_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e300.v1.10.11.5274269.tar.bz2"
  E300_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e300.v2.0.8-hotfix.1.5278088.tar.bz2"
  E1000_SRC_v1: "https://dl.ui.com/firmwares/edgemax/v1.10.11/gpl/GPL.ER-e1000.v1.10.11.5274249.tar.bz2"
  E1000_SRC_v2: "https://dl.ui.com/firmwares/edgemax/v2.0.8-hotfix.1/gpl/GPL.ER-e1000.v2.0.8-hotfix.1.5278088.tar.bz2"

stages:
  - docker
  - headers
  - module

docker:mipsel:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:mipsel" -f DOCKERFILE-mipsel .
    - docker push "$CI_REGISTRY_IMAGE:mipsel"
  only:
    - master
  when: manual
  allow_failure: true

docker:mtk:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:mtk" -f DOCKERFILE-mtk .
    - docker push "$CI_REGISTRY_IMAGE:mtk"
  only:
    - master
  when: manual
  allow_failure: true

docker:octeon:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:octeon" -f DOCKERFILE-octeon .
    - docker push "$CI_REGISTRY_IMAGE:octeon"
  only:
    - master
  when: manual
  allow_failure: true

.headers:mipsel:
  image: $CI_REGISTRY_IMAGE:mipsel
  stage: headers
  script:
    - mkdir /build $CI_PROJECT_DIR/headers
    - cd /build
    - curl -o src.tar.bz2 $SOURCE
    - tar -xf src.tar.bz2 --wildcards 'source/kernel_*' --strip-components 1
    - mv kernel_* kernel.tar.gz
    - tar -xf kernel.tar.gz --strip-components 1
    - if [ $VERSION -ne 1 ]; then make ARCH=mips ubnt_er_${DEVICE}_defconfig; fi;
    - make -j5 ARCH=mips CROSS_COMPILE=mipsel-linux-gnu- prepare modules_prepare
    - make -j5 ARCH=mips CROSS_COMPILE=mipsel-linux-gnu- vmlinux modules
    - cp Module.symvers $CI_PROJECT_DIR/headers
    - make mrproper
    - make ARCH=mips O=$CI_PROJECT_DIR/headers ubnt_er_${DEVICE}_defconfig
    - make -j5 ARCH=mips O=$CI_PROJECT_DIR/headers CROSS_COMPILE=mipsel-linux-gnu- modules_prepare
  dependencies:
    - docker:mipsel
  artifacts:
    paths:
      - headers/

headers:e50:v1:
  extends: .headers:mipsel
  variables:
    SOURCE: $E50_SRC_v1
    DEVICE: e50
    VERSION: 1

headers:e50:v2:
  extends: .headers:mipsel
  variables:
    SOURCE: $E50_SRC_v2
    DEVICE: e50
    VERSION: 2

.headers:octeon:
  image: $CI_REGISTRY_IMAGE:octeon
  stage: headers
  script:
    - mkdir /build $CI_PROJECT_DIR/headers
    - cd /build
    - curl -o src.tar.bz2 $SOURCE
    - tar -xf src.tar.bz2 --wildcards 'source/kernel_*' --strip-components 1
    - mv kernel_* kernel.tar.gz
    - tar -xf kernel.tar.gz --strip-components 1
    - if [ $VERSION -ne 1 ]; then make ARCH=mips ubnt_er_${DEVICE}_defconfig; fi;
    - make -j5 ARCH=mips CROSS_COMPILE=mips64-octeon-linux- prepare modules_prepare
    - make -j5 ARCH=mips CROSS_COMPILE=mips64-octeon-linux- vmlinux modules
    - cp Module.symvers $CI_PROJECT_DIR/headers
    - make mrproper
    - make ARCH=mips O=$CI_PROJECT_DIR/headers ubnt_er_${DEVICE}_defconfig
    - make -j5 ARCH=mips O=$CI_PROJECT_DIR/headers CROSS_COMPILE=mips64-octeon-linux- modules_prepare
  dependencies:
    - docker:octeon
  artifacts:
    paths:
      - headers/

headers:e100:v1:
  extends: .headers:octeon
  variables:
    SOURCE: $E100_SRC_v1
    DEVICE: e100
    VERSION: 1

headers:e100:v2:
  extends: .headers:octeon
  variables:
    SOURCE: $E100_SRC_v2
    DEVICE: e100
    VERSION: 2

headers:e200:v1:
  extends: .headers:octeon
  variables:
    SOURCE: $E200_SRC_v1
    DEVICE: e200
    VERSION: 1

headers:e200:v2:
  extends: .headers:octeon
  variables:
    SOURCE: $E200_SRC_v2
    DEVICE: e200
    VERSION: 2

headers:e300:v1:
  extends: .headers:octeon
  variables:
    SOURCE: $E300_SRC_v1
    DEVICE: e300
    VERSION: 1

headers:e300:v2:
  extends: .headers:octeon
  variables:
    SOURCE: $E300_SRC_v2
    DEVICE: e300
    VERSION: 2

headers:e1000:v1:
  extends: .headers:octeon
  variables:
    SOURCE: $E1000_SRC_v1
    DEVICE: e1000
    VERSION: 1

headers:e1000:v2:
  extends: .headers:octeon
  variables:
    SOURCE: $E1000_SRC_v2
    DEVICE: e1000
    VERSION: 2
